import os
import re
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# .env рдлрд╝рд╛рдЗрд▓ рд╕реЗ environment variables рд▓реЛрдб рдХрд░реЗрдВ
load_dotenv()

# рд▓реЙрдЧрд┐рдВрдЧ рд╕реЗрдЯ рдХрд░реЗрдВ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# рдПрдирд╡рд╛рдпрд░реНрдирдореЗрдВрдЯ рд╡реЗрд░рд┐рдПрдмрд▓реНрд╕ рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рд▓реЗрдВ
BOT_TOKEN = os.getenv("BOT_TOKEN")
IMAGE_URL = os.getenv("IMAGE_URL", "https://picsum.photos/600/300")
LOG_CHANNEL_USERNAME = os.getenv("LOG_CHANNEL_USERNAME", "@teamrajweb")

# рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╕реНрдЯреЗрдЯреНрд╕
(GET_CHANNEL_ID,) = range(1)


# -------------------------
# Utility / Parsing Helpers (Poll functions kept for /poll command)
# -------------------------
def parse_poll_from_args(args: list) -> tuple | None:
    """/poll рдХрдорд╛рдВрдб рд╕реЗ рд╕рд╡рд╛рд▓ рдФрд░ рд╡рд┐рдХрд▓реНрдкреЛрдВ рдХреЛ рдкрд╛рд░реНрд╕ рдХрд░рддрд╛ рд╣реИред"""
    if not args:
        return None
    full_text = " ".join(args)
    return parse_poll_from_text(full_text)


def parse_poll_from_text(text: str) -> tuple | None:
    """рдХрд┐рд╕реА raw text рдореЗрдВ рд╕реЗ poll parse рдХрд░реЗрдВред"""
    if not text or '?' not in text:
        return None
    try:
        question_part, options_part = text.split('?', 1)
        question = question_part.strip()
        options_part = options_part.strip()
        options = [opt.strip() for opt in options_part.split(',') if opt.strip()]
        if not question or len(options) < 2 or len(options) > 10:
            return None
        return question, options
    except Exception:
        logging.exception("parse_poll_from_text failed")
        return None


# -------------------------
# Core Bot Functions
# -------------------------
async def send_start_message(update: Update, context: ContextTypes.DEFAULT_TYPE, reply_markup: InlineKeyboardMarkup, welcome_message: str, chat_id=None):
    """рдЗрдореЗрдЬ рдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдХреЗ рд╕рд╛рде рд╕реНрдЯрд╛рд░реНрдЯ рдореИрд╕реЗрдЬ рднреЗрдЬрддрд╛ рд╣реИред"""
    target_chat_id = chat_id if chat_id else update.effective_chat.id
    try:
        await context.bot.send_photo(
            chat_id=target_chat_id,
            photo=IMAGE_URL,
            caption=welcome_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"Image send failed: {e}. Sending text message instead.")
        try:
            await context.bot.send_message(
                chat_id=target_chat_id,
                text=welcome_message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        except Exception:
            logging.exception("Failed to send fallback welcome message")


# 1. /start рдХрдорд╛рдВрдб (Deep Link Handling рдХреЗ рд╕рд╛рде)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    bot_user = await context.bot.get_me()
    bot_username = bot_user.username
    
    # --- DEEP LINK LOGIC ---
    if context.args:
        payload = context.args[0]
        match = re.match(r'link_(\d+)', payload)

        if match:
            channel_id_str = match.groups()[0]
            # ID рдХреЛ рд╡рд╛рдкрд╕ full numeric format (-100...) рдореЗрдВ рдмрджрд▓реЗрдВ (14 digits)
            target_channel_id_numeric = int(f"-100{channel_id_str}") 

            try:
                # рдЪреИрдирд▓ рдХрд╛ рдирд╛рдо рдФрд░ URL рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
                chat_info = await context.bot.get_chat(chat_id=target_channel_id_numeric)
                channel_title = chat_info.title
                channel_url = chat_info.invite_link or f"https://t.me/{chat_info.username}" if chat_info.username else None
                
                # A. User рдХреЛ рдХрдиреНрдлрд░реНрдореЗрд╢рди рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ (Advanced "You have Joined" Message)
                await update.message.reply_text(
                    f"тЬи **You have Joined!** ЁЯОЙ\n\n"
                    f"рдЖрдк рдЪреИрдирд▓ **`{channel_title}`** рд╕реЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреБрдбрд╝ рдЧрдП рд╣реИрдВред\n"
                    f"рдЖрдкрдХреА рднрд╛рдЧреАрджрд╛рд░реА рдХреА рд╕реВрдЪрдирд╛ рдЕрдм рдЪреИрдирд▓ рдПрдбрдорд┐рди рдХреЛ рднреЗрдЬ рджреА рдЧрдИ рд╣реИред"
                )

                # B. Notification message рдЪреИрдирд▓ рдореЗрдВ рднреЗрдЬреЗрдВ (Advanced Style)
                
                notification_message = (
                    f"**ЁЯСС New Participant Joined! ЁЯСС**\n"
                    f"--- **Participation Details** ---\n\n"
                    f"ЁЯСд **Name:** [{user.first_name}](tg://user?id={user.id})\n"
                    f"ЁЯЖФ **User ID:** `{user.id}`\n"
                    f"ЁЯМР **Username:** {f'@{user.username}' if user.username else 'N/A'}\n\n"
                    f"ЁЯФЧ **Channel:** `{channel_title}`\n"
                    f"ЁЯдЦ **Bot:** @{bot_username}"
                )

                # 'Go to Channel' рдпрд╛ 'Connect with User' рдмрдЯрди
                channel_keyboard = []
                if channel_url:
                    channel_keyboard.append([
                        InlineKeyboardButton("тЮбя╕П Go to Channel", url=channel_url)
                    ])
                else:
                     channel_keyboard.append([
                        InlineKeyboardButton("ЁЯТм Connect with User", url=f"tg://user?id={user.id}")
                    ])

                channel_markup = InlineKeyboardMarkup(channel_keyboard)

                # Image рдХреЗ рд╕рд╛рде рдПрдбрд╡рд╛рдВрд╕ рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ
                await context.bot.send_photo(
                    chat_id=target_channel_id_numeric,
                    photo=IMAGE_URL,
                    caption=notification_message,
                    parse_mode='Markdown',
                    reply_markup=channel_markup
                )
                
                return

            except Exception as e:
                logging.error(f"Deep link notification failed: {e}")
                await update.message.reply_text("рдорд╛рдлрд╝ рдХрд░рдирд╛, рдЪреИрдирд▓ рд╕реЗ рдЬреБрдбрд╝рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдмреЙрдЯ рдЪреИрдирд▓ рдХрд╛ рдПрдбрдорд┐рди рд╣реИред")
                # Fallback to main start menu
    
    # --- REGULAR START MENU (Stylish Buttons) ---
    keyboard = [
        [
            InlineKeyboardButton("ЁЯФЧ рд▓рд┐рдВрдХ рдкрд╛рдПрдБ", callback_data='start_channel_conv'),
            InlineKeyboardButton("тЮХ рдЧреНрд░реБрдк рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ", url=f"https://t.me/{bot_username}?startgroup=true")
        ],
        [
            InlineKeyboardButton("ЁЯУК рдореЗрд░реЗ рд╡реЛрдЯреНрд╕", callback_data='my_polls_list'),
            InlineKeyboardButton("тЭУ рдЧрд╛рдЗрдб", url='https://t.me/teamrajweb'),
            InlineKeyboardButton("ЁЯУв рдЪреИрдирд▓", url='https://t.me/narzoxbot')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_message = (
        "**ЁЯСС рд╡реЛрдЯ рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯСС**\n\n"
        "рдЪреИрдирд▓ рдХреЛ рдХрдиреЗрдХреНрдЯ рдХрд░ **рддреБрд░рдВрдд рд╢реЗрдпрд░ рд▓рд┐рдВрдХ** рдкрд╛рдиреЗ рд╣реЗрддреБ *'ЁЯФЧ рд▓рд┐рдВрдХ рдкрд╛рдПрдБ'* рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред\n\n"
        "__**Stylish Quote:**__\n"
        "*\"рдЖрдкрдХреЗ рд╡рд┐рдЪрд╛рд░ рдорд╛рдпрдиреЗ рд░рдЦрддреЗ рд╣реИрдВред рд╡реЛрдЯ рджреЗрдВ, рдмрджрд▓рд╛рд╡ рд▓рд╛рдПрдБред\"*\n"
        "~ The Voting Bot"
    )

    await send_start_message(update, context, reply_markup, welcome_message)


# 2. рд╕рд╛рдзрд╛рд░рдг /poll рдХрдорд╛рдВрдб (chat рдореЗрдВ)
async def create_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # This remains the same for creating simple polls outside the conversation flow.
    parsed = parse_poll_from_args(context.args)
    if not parsed:
        text = update.message.text if update.message else ""
        text = re.sub(r'^/poll(@\w+)?\s*', '', text, count=1)
        parsed = parse_poll_from_text(text)

    if not parsed:
        await update.message.reply_text(
            "рдХреГрдкрдпрд╛ рд╕рд╣реА рдлреЙрд░реНрдореЗрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ:\n"
            "`/poll [рд╕рд╡рд╛рд▓]? [рдСрдкреНрд╢рди1], [рдСрдкреНрд╢рди2], ...`",
            parse_mode='Markdown'
        )
        return

    question, options = parsed
    try:
        await context.bot.send_poll(
            chat_id=update.effective_chat.id,
            question=question,
            options=options,
            is_anonymous=False,
            allows_multiple_answers=False,
        )
        await update.message.reply_text("тЬЕ рдЖрдкрдХрд╛ рд╡реЛрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдмрдирд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ!")
    except Exception as e:
        logging.exception("Failed to send poll in chat")
        await update.message.reply_text(f"рд╡реЛрдЯ рднреЗрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}")


# 3. Callback рд╕реЗ рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╢реБрд░реВ рдХрд░рдирд╛
async def start_channel_poll_conversation_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="ЁЯСЛ **рдЪреИрдирд▓ рд▓рд┐рдВрдХ рд╕реЗрдЯрдЕрдк:**\n"
             "рдХреГрдкрдпрд╛ рдЙрд╕ **рдЪреИрдирд▓ рдХрд╛ @username рдпрд╛ ID** рднреЗрдЬреЗрдВ рдЬрд┐рд╕рдХреЗ рд▓рд┐рдП рдЖрдк рд▓рд┐рдВрдХ рдЬрдирд░реЗрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред\n\n"
             "**рдиреЛрдЯ:** рдореБрдЭреЗ рдЗрд╕ рдЪреИрдирд▓ рдХрд╛ **рдПрдбрдорд┐рди** рд╣реЛрдирд╛ рдЬрд╝рд░реВрд░реА рд╣реИред",
        parse_mode='Markdown'
    )
    return GET_CHANNEL_ID


# 4. рдЪреИрдирд▓ ID рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ, рдмреЙрдЯ рдПрдбрдорд┐рди рдЪреЗрдХ рдХрд░реЗрдВ рдФрд░ INSTANT LINK рднреЗрдЬреЗрдВ
async def get_channel_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel_id_input = update.message.text.strip()
    user = update.effective_user

    # ID detection and normalization logic
    numeric_match = re.match(r'^-?\d+$', channel_id_input)
    if numeric_match:
        channel_id = int(channel_id_input) # Numeric ID (-100...)
    else:
        channel_id = channel_id_input if channel_id_input.startswith('@') else f"@{channel_id_input}"

    try:
        bot_user = await context.bot.get_me()
        bot_id = bot_user.id
        bot_username = bot_user.username or "bot"

        # 1. рдмреЙрдЯ рдПрдбрдорд┐рди рдЪреЗрдХ рдХрд░реЗрдВ рдФрд░ рдЪреИрдЯ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
        chat_member = await context.bot.get_chat_member(chat_id=channel_id, user_id=bot_id)
        chat_info = await context.bot.get_chat(chat_id=channel_id) # Chat info рдПрдХ рдмрд╛рд░ рдореЗрдВ рд╣реА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
        
        if getattr(chat_member, "status", "").lower() in ['administrator', 'creator']:
            
            # 2. рд╕рдлрд▓рддрд╛: INSTANT UNIQUE LINK рдмрдирд╛рдПрдВ рдФрд░ рднреЗрдЬреЗрдВ
            
            # chat_info.id рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ Deep Link payload рдмрдирд╛рдПрдВ
            # рдпрд╣ ID рд╣рдореЗрд╢рд╛ numeric рд╣реЛрддреА рд╣реИред
            raw_id_str = str(chat_info.id)
            if raw_id_str.startswith('-100'):
                link_channel_id = raw_id_str[4:] 
            else:
                 # Group ID рдХреЗ рд▓рд┐рдП
                link_channel_id = raw_id_str.replace('-', '')

            # Payload: link_<channel_id_clean>
            deep_link_payload = f"link_{link_channel_id}"
            
            # рд╢реЗрдпрд░ рдХрд░рдиреЗ рдпреЛрдЧреНрдп рд▓рд┐рдВрдХ
            share_url = f"https://t.me/{bot_username}?start={deep_link_payload}"
            
            channel_title = chat_info.title
            
            # 3. рдпреВрдЬрд╝рд░ рдХреЛ рд▓рд┐рдВрдХ рджрд┐рдЦрд╛рдПрдБ (рдХреЙрдкреА рдХрд░рдиреЗ рдпреЛрдЧреНрдп)
            await update.message.reply_text(
                f"тЬЕ рдЪреИрдирд▓ **{channel_title}** рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдХрдиреЗрдХреНрдЯ рд╣реЛ рдЧрдпрд╛ рд╣реИ!\n\n"
                f"**рдЖрдкрдХреА рд╢реЗрдпрд░ рдХрд░рдиреЗ рдпреЛрдЧреНрдп UNIQUE LINK рддреИрдпрд╛рд░ рд╣реИред рдЗрд╕реЗ рдХреЙрдкреА рдХрд░реЗрдВ:**\n"
                f"```\n{share_url}\n```\n\n"
                f"**рдпрд╛ рдЗрд╕ рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ:**",
                parse_mode='Markdown'
            )
            
            # 4. рдмрдЯрди рднреЗрдЬреЗрдВ (рд▓рд┐рдВрдХ рдХреЛ рдЖрд╕рд╛рди рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП)
            share_keyboard = [[
                InlineKeyboardButton("ЁЯФЧ рдЕрдкрдиреА рд▓рд┐рдВрдХ рд╢реЗрдпрд░ рдХрд░реЗрдВ", url=share_url),
            ]]
            share_markup = InlineKeyboardMarkup(share_keyboard)
            
            await update.message.reply_text(
                "рд╢реЗрдпрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрдЯрди рджрдмрд╛рдПрдБ:",
                reply_markup=share_markup
            )
            
            # 5. LOG_CHANNEL_USERNAME рдореЗрдВ рд╕реВрдЪрдирд╛ рднреЗрдЬреЗрдВ (Optional)
            if LOG_CHANNEL_USERNAME:
                log_message = (
                    f"**ЁЯФЧ рдирдпрд╛ рдЪреИрдирд▓ рд▓рд┐рдВрдХ рдмрдирд╛!**\n"
                    f"рдпреВрдЬрд░: [{user.first_name}](tg://user?id={user.id})\n"
                    f"рдЪреИрдирд▓: `{channel_title}`\n"
                    f"рд╢реЗрдпрд░ рд▓рд┐рдВрдХ: {share_url}"
                )
                await context.bot.send_message(
                    chat_id=LOG_CHANNEL_USERNAME,
                    text=log_message,
                    parse_mode='Markdown'
                )

            return ConversationHandler.END # рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╕рдорд╛рдкреНрдд

        else:
            # 3. рдЕрд╕рдлрд▓рддрд╛: рдмреЙрдЯ рдПрдбрдорд┐рди рдирд╣реАрдВ рд╣реИ
            await update.message.reply_text(
                "тЭМ рдореИрдВ рдЖрдкрдХреЗ рдЪреИрдирд▓ рдХрд╛ **рдПрдбрдорд┐рди рдирд╣реАрдВ** рд╣реВрдБред\n"
                "рдХреГрдкрдпрд╛ рдореБрдЭреЗ рдПрдбрдорд┐рди (рдХрдо рд╕реЗ рдХрдо **'Post Messages'** рдХреА рдЕрдиреБрдорддрд┐ рдХреЗ рд╕рд╛рде) рдмрдирд╛рдПрдБ рдФрд░ рдлрд┐рд░ рд╕реЗ рдЪреИрдирд▓ рдХрд╛ @username/ID рднреЗрдЬреЗрдВред"
            )
            return GET_CHANNEL_ID # рдЗрд╕реА рд╕реНрдЯреЗрдЯ рдореЗрдВ рд░рд╣реЗрдВ

    except Exception as e:
        logging.error(f"Error in get_channel_id for input {channel_id_input}: {e}")
        await update.message.reply_text(
            "тЪая╕П **рдЪреИрдирд▓ рддрдХ рдкрд╣реБрдБрдЪрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐** рд╣реБрдИред рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐:\n"
            "1. рдЪреИрдирд▓ рдХрд╛ @username/ID рд╕рд╣реА рд╣реИред\n"
            "2. рдЪреИрдирд▓ **рдкрдмреНрд▓рд┐рдХ** рд╣реИ рдпрд╛ рдЖрдкрдиреЗ рдореБрдЭреЗ рдЪреИрдирд▓ рдореЗрдВ **рдПрдбрдорд┐рди** рдХреЗ рд░реВрдк рдореЗрдВ рдЬреЛрдбрд╝рд╛ рд╣реИред"
        )
        return GET_CHANNEL_ID


# 5. cancel handler
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд░рджреНрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред')
    return ConversationHandler.END


# -------------------------
# main()
# -------------------------
def main():
    if not BOT_TOKEN:
        logging.error("BOT_TOKEN environment variable рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред")
        return

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # 1. /start (Deep Link Logic Included)
    application.add_handler(CommandHandler("start", start))

    # 2. simple /poll for chats
    application.add_handler(CommandHandler("poll", create_poll))

    # 3. conversation for instant link
    link_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_channel_poll_conversation_cb, pattern='^start_channel_conv$'),
        ],
        states={
            GET_CHANNEL_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_channel_id)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=False
    )

    application.add_handler(link_conv_handler)

    logging.info("рдмреЙрдЯ рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ...")
    application.run_polling(poll_interval=3)


if __name__ == '__main__':
    main()
