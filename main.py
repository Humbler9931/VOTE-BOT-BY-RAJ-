import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import (
    ApplicationBuilder, 
    ContextTypes, 
    CommandHandler, 
    MessageHandler, 
    filters,
    ConversationHandler
)

# .env рдлрд╝рд╛рдЗрд▓ рд╕реЗ environment variables рд▓реЛрдб рдХрд░реЗрдВ
load_dotenv()

# рд▓реЙрдЧрд┐рдВрдЧ рд╕реЗрдЯ рдХрд░реЗрдВ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# рдПрдирд╡рд╛рдпрд░реНрдирдореЗрдВрдЯ рд╡реЗрд░рд┐рдПрдмрд▓реНрд╕
BOT_TOKEN = os.getenv("BOT_TOKEN")
IMAGE_URL = os.getenv("IMAGE_URL", "https://picsum.photos/600/300") # .env рдореЗрдВ IMAGE_URL рднреА рдЬреЛрдбрд╝реЗрдВ
CHANNEL_USERNAME = os.getenv("LOG_CHANNEL_USERNAME", "@teamrajweb") # .env рдореЗрдВ LOG_CHANNEL_USERNAME рдЬреЛрдбрд╝реЗрдВ (рд╡реИрдХрд▓реНрдкрд┐рдХ)

# рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╕реНрдЯреЗрдЯреНрд╕
(GET_CHANNEL_ID, CHECK_ADMIN, CREATE_POLL) = range(3)

# --- /start рдХрдорд╛рдВрдб рдХреЗ рд▓рд┐рдП рдлрд╝рдВрдХреНрд╢рди ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рдПрдХ рдПрдбрд╡рд╛рдВрд╕ рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ рдФрд░ рдЗрдирд▓рд╛рдЗрди рдмрдЯрдиреНрд╕ рднреЗрдЬрддрд╛ рд╣реИред"""
    
    # 1. рд╕реНрдЯрд╛рдЗрд▓рд┐рд╢ рдЗрдирд▓рд╛рдЗрди рдмрдЯрдиреНрд╕ рдмрдирд╛рдПрдБ
    keyboard = [
        [
            InlineKeyboardButton("ЁЯУЭ рдирдпрд╛ рд╡реЛрдЯ рдмрдирд╛рдПрдБ (рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП)", callback_data='start_channel_poll'),
            InlineKeyboardButton("тЭУ рдЧрд╛рдЗрдб/рдорджрдж", url='https://t.me/teamrajweb')
        ],
        [
            InlineKeyboardButton("ЁЯУК рдореЗрд░реЗ рдмрдирд╛рдП рд╡реЛрдЯреНрд╕", callback_data='my_polls_list'),
            InlineKeyboardButton("ЁЯФЧ рд╕реЛрд░реНрд╕ рдХреЛрдб", url='https://t.me/teamrajweb')
        ],
        [
            InlineKeyboardButton("ЁЯУв рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░реЗрдВ", url='https://t.me/narzoxbot')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # 2. рдПрдбрд╡рд╛рдВрд╕ рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ
    welcome_message = (
        "**ЁЯОЙ рд╡реЛрдЯ рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯОЙ**\n\n"
        "рдореИрдВ рдЧреНрд░реБрдкреНрд╕ рдФрд░ рдЪреИрдЯреНрд╕ рдореЗрдВ рдЖрд╕рд╛рдиреА рд╕реЗ рд╡реЛрдЯ рдмрдирд╛рдиреЗ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рддрд╛ рд╣реВрдБред "
        "рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП рд╡реЛрдЯ рдмрдирд╛рдиреЗ рд╣реЗрддреБ *'ЁЯУЭ рдирдпрд╛ рд╡реЛрдЯ рдмрдирд╛рдПрдБ'* рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред\n\n"
        "**_Quote:_**\n"
        "\"рд╕рдлрд▓рддрд╛ рдХрд╛ рд░рд╣рд╕реНрдп рдорддрджрд╛рди рд╣реИ: рд╣рд░ рдЖрд╡рд╛рдЬрд╝ рдорд╛рдпрдиреЗ рд░рдЦрддреА рд╣реИред\"\n"
        "~ Voting System"
    )
    
    # 3. рдЗрдореЗрдЬ рдХреЗ рд╕рд╛рде рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ
    try:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=IMAGE_URL,
            caption=welcome_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"Image send failed: {e}. Sending text message instead.")
        await update.message.reply_text(
            welcome_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

# --- рдЪреИрдирд▓ рдкреЛрд▓ рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╢реБрд░реВ рдХрд░реЗрдВ ---
async def start_channel_poll_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рдЪреИрдирд▓ ID/Username рдкреВрдЫрдХрд░ рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╢реБрд░реВ рдХрд░рддрд╛ рд╣реИред"""
    query = update.callback_query
    await query.answer()
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="рдХреГрдкрдпрд╛ рдЙрд╕ **рдЪреИрдирд▓ рдХрд╛ @username рдпрд╛ ID** рднреЗрдЬреЗрдВ рдЬрд┐рд╕рдХреЗ рд▓рд┐рдП рдЖрдк рд╡реЛрдЯ рдмрдирд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред\n\n"
             "*(рдЙрджрд╛рд╣рд░рдг: @my_channel_name рдпрд╛ -100123456789)*"
    )
    return GET_CHANNEL_ID # рдЕрдЧрд▓рд╛ рд╕реНрдЯреЗрдЯ: рдЪреИрдирд▓ ID рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ

# --- рдЪреИрдирд▓ ID рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ ---
async def get_channel_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рдпреВрдЬрд░ рд╕реЗ рдЪреИрдирд▓ ID рдкреНрд░рд╛рдкреНрдд рдХрд░рддрд╛ рд╣реИ рдФрд░ рдмреЙрдЯ рдПрдбрдорд┐рди рдХреА рдЬрд╛рдБрдЪ рдХрд░рддрд╛ рд╣реИред"""
    channel_id = update.message.text.strip()
    user_id = update.effective_user.id
    
    # рдЕрд╕реНрдерд╛рдпреА рд░реВрдк рд╕реЗ рдбреЗрдЯрд╛ рд╕реНрдЯреЛрд░ рдХрд░реЗрдВ
    context.user_data['temp_channel_id'] = channel_id
    context.user_data['temp_user_id'] = user_id

    try:
        # рдмреЙрдЯ рдХреА рдПрдбрдорд┐рди рд╕реНрдерд┐рддрд┐ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ
        chat_member = await context.bot.get_chat_member(chat_id=channel_id, user_id=context.bot.id)
        
        if chat_member.status in ['administrator', 'creator']:
            # рдЕрдЧрд░ рдмреЙрдЯ рдПрдбрдорд┐рди рд╣реИ, рддреЛ рд╡реЛрдЯ рдХрд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ
            await update.message.reply_text(
                "тЬЕ рдмреЙрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЪреИрдирд▓ **рдПрдбрдорд┐рди** рд╣реИред\n"
                "рдЕрдм рдЖрдк рдЕрдкрдирд╛ рд╡реЛрдЯ рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВред рдХреГрдкрдпрд╛ **`/poll [рд╕рд╡рд╛рд▓]? [рдСрдкреНрд╢рди1], [рдСрдкреНрд╢рди2], ...`** рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рднреЗрдЬреЗрдВред"
            )
            return CREATE_POLL # рдЕрдЧрд▓рд╛ рд╕реНрдЯреЗрдЯ: рд╡реЛрдЯ рдмрдирд╛рдПрдБ
        else:
            # рдЕрдЧрд░ рдмреЙрдЯ рдПрдбрдорд┐рди рдирд╣реАрдВ рд╣реИ
            await update.message.reply_text(
                "тЭМ рдореИрдВ рдЖрдкрдХреЗ рдЪреИрдирд▓ рдХрд╛ **рдПрдбрдорд┐рди рдирд╣реАрдВ** рд╣реВрдБред\n"
                "рдХреГрдкрдпрд╛ рдореБрдЭреЗ рдПрдбрдорд┐рди (рдХрдо рд╕реЗ рдХрдо **'Send Messages'** рдХреА рдЕрдиреБрдорддрд┐ рдХреЗ рд╕рд╛рде) рдмрдирд╛рдПрдБ рдФрд░ рдлрд┐рд░ рд╕реЗ рдЪреИрдирд▓ рдХрд╛ @username рднреЗрдЬреЗрдВред"
            )
            return GET_CHANNEL_ID # рдЗрд╕реА рд╕реНрдЯреЗрдЯ рдореЗрдВ рд░рд╣реЗрдВ рдФрд░ рджреЛрдмрд╛рд░рд╛ рдкреВрдЫреЗрдВ

    except Exception as e:
        logging.error(f"Error checking admin status: {e}")
        await update.message.reply_text(
            f"рдЪреИрдирд▓ рддрдХ рдкрд╣реБрдБрдЪрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐:\n"
            "1. рдЪреИрдирд▓ рдХрд╛ @username/ID рд╕рд╣реА рд╣реИред\n"
            "2. рдЪреИрдирд▓ **рдкрдмреНрд▓рд┐рдХ** рд╣реИ рдпрд╛ рдореИрдВрдиреЗ рдЖрдкрдХреЛ **рдПрдбрдорд┐рди** рдХреЗ рд░реВрдк рдореЗрдВ рдЬреЛрдбрд╝рд╛ рд╣реИред"
        )
        return GET_CHANNEL_ID # рдЗрд╕реА рд╕реНрдЯреЗрдЯ рдореЗрдВ рд░рд╣реЗрдВ рдФрд░ рджреЛрдмрд╛рд░рд╛ рдкреВрдЫреЗрдВ

# --- рд▓рд┐рдВрдХ рдХреНрд▓рд┐рдХ рд╣реЛрдиреЗ рдкрд░ рдЪреИрдирд▓ рдореЗрдВ рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ (рдпрд╣ рдХрд╛рд▓реНрдкрдирд┐рдХ рд╣реИ, /start рдореЗрдВ рд╣реА рд▓реЙрдЬрд┐рдХ рдЬреЛрдбрд╝рддреЗ рд╣реИрдВ) ---
async def send_linked_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рдЬрдм рдХреЛрдИ deep link (/start рдХреЗ рдмрд╛рдж рдХреБрдЫ) рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рддрд╛ рд╣реИ рддреЛ рдЪреИрдирд▓ рдореЗрдВ рдореИрд╕реЗрдЬ рднреЗрдЬрддрд╛ рд╣реИред"""
    
    # рдпрд╣ рд▓реЙрдЬрд┐рдХ рд╕реАрдзреЗ /start рдлрд╝рдВрдХреНрд╢рди рдореЗрдВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП
    # Deep Linking рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП /start рдХрдорд╛рдВрдб рдХреЗ рдмрд╛рдж 'start' рдХреЗ рдЕрд▓рд╛рд╡рд╛ 'payload' рдЪреЗрдХ рдХрд░реЗрдВред
    pass


# --- /poll рдХрдорд╛рдВрдб (рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП) ---
async def create_channel_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рдЪреИрдирд▓ рдореЗрдВ рд╡реЛрдЯ рдмрдирд╛рддрд╛ рд╣реИ рдФрд░ рдбреАрдк рд▓рд┐рдВрдХ рдХреЗ рд╕рд╛рде рдХрдиреНрдлрд░реНрдореЗрд╢рди рднреЗрдЬрддрд╛ рд╣реИред"""
    
    # 1. рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рдбреЗрдЯрд╛ рд╕реЗ рдЪреИрдирд▓ ID рдирд┐рдХрд╛рд▓реЗрдВ
    channel_id = context.user_data.get('temp_channel_id')
    user = update.effective_user

    if not channel_id:
        await update.message.reply_text(
            "рдкрд╣рд▓реЗ **ЁЯУЭ рдирдпрд╛ рд╡реЛрдЯ рдмрдирд╛рдПрдБ (рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП)** рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдХреЗ рдЪреИрдирд▓ рд╕реЗрдЯ рдХрд░реЗрдВред"
        )
        return ConversationHandler.END

    args = update.message.text.split(' ')[1:] # /poll рдХреЛ рдЫреЛрдбрд╝рдХрд░ рдмрд╛рдХреА рдЯреЗрдХреНрд╕реНрдЯ рд▓реЗрдВ
    
    # ... (рдмрд╛рдХреА poll рдмрдирд╛рдиреЗ рдХрд╛ рд▓реЙрдЬрд┐рдХ рд╡рд╣реА рд░рд╣реЗрдЧрд╛) ...
    if not args or '?' not in " ".join(args):
        await update.message.reply_text("рдХреГрдкрдпрд╛ рд╕рд╣реА рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рд╕рд╡рд╛рд▓ рдФрд░ рд╡рд┐рдХрд▓реНрдк рджреЗрдВред")
        return CREATE_POLL

    full_text = " ".join(args)
    try:
        question, options_str = full_text.split('?', 1)
        question = question.strip()
        options = [opt.strip() for opt in options_str.split(',') if opt.strip() and len(opt.strip()) > 0]
    except:
        await update.message.reply_text("рд╕рд╡рд╛рд▓ рдФрд░ рд╡рд┐рдХрд▓реНрдкреЛрдВ рдХреЛ рдЕрд▓рдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП '?' рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред")
        return CREATE_POLL
    
    if len(options) < 2 or len(options) > 10:
        await update.message.reply_text(f"рд╡реЛрдЯ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП 2 рд╕реЗ 10 рд╡рд┐рдХрд▓реНрдк рдЪрд╛рд╣рд┐рдПред рдЖрдкрдХреЛ рдорд┐рд▓реЗ: {len(options)}")
        return CREATE_POLL
    
    # 2. рдЪреИрдирд▓ рдореЗрдВ рд╡реЛрдЯ рднреЗрдЬреЗрдВ
    try:
        poll_message = await context.bot.send_poll(
            chat_id=channel_id,
            question=question,
            options=options,
            is_anonymous=False,
            allows_multiple_answers=False,
        )

        # 3. рд╕реНрдЯрд╛рд░реНрдЯ рдЗрдореЗрдЬ рдФрд░ рдпреВрдЬрд░ рдбрд┐рдЯреЗрд▓реНрд╕ рдХреЗ рд╕рд╛рде рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ
        deep_link_payload = f"poll_{poll_message.message_id}_{channel_id.replace('@', '')}"
        
        # рдмрдЯрди: 'рдмреЙрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ' рдмрдЯрди рдмрдирд╛рдПрдВ (deep-link рдХреЗ рд╕рд╛рде)
        welcome_keyboard = [[
            InlineKeyboardButton(
                f"ЁЯСЛ {user.first_name} рд╕реЗ рдЬреБрдбрд╝реЗрдВ!", 
                url=f"https://t.me/{context.bot.username}?start={deep_link_payload}"
            )
        ]]
        welcome_markup = InlineKeyboardMarkup(welcome_keyboard)
        
        # рдЪреИрдирд▓ рдореЗрдВ рднреЗрдЬрдиреЗ рд╡рд╛рд▓рд╛ рдореИрд╕реЗрдЬ (рдЬреИрд╕рд╛ рдЖрдкрдиреЗ рдкреВрдЫрд╛)
        channel_welcome_message = (
            f"**ЁЯе│ рдирдпрд╛ рд╡реЛрдЯ!**\n\n"
            f"рдпрд╣ рд╡реЛрдЯ рдпреВрдЬрд░ рджреНрд╡рд╛рд░рд╛ рдмрдирд╛рдпрд╛ рдЧрдпрд╛ рд╣реИ:\n"
            f"ЁЯСд **рдирд╛рдо:** [{user.first_name}](tg://user?id={user.id})\n"
            f"ЁЯЖФ **ID:** `{user.id}`\n"
            f"ЁЯМР **Username:** {f'@{user.username}' if user.username else 'N/A'}\n\n"
            f"рдЗрд╕ рдпреВрдЬрд░ рд╕реЗ рдЬреБрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред\n"
        )

        # рдмреЛрдЯ рдХреЗ рд▓реЙрдЧ/рдХрдиреЗрдХреНрд╢рди рдЪреИрдирд▓ рдореЗрдВ рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ (рдЙрджрд╛рд╣рд░рдг: @teamrajweb)
        if CHANNEL_USERNAME:
            try:
                await context.bot.send_photo(
                    chat_id=CHANNEL_USERNAME,
                    photo=IMAGE_URL,
                    caption=channel_welcome_message,
                    parse_mode='Markdown',
                    reply_markup=welcome_markup
                )
            except Exception as log_e:
                logging.error(f"Failed to send log message to channel: {log_e}")
        
        # рдпреВрдЬрд░ рдХреЛ рдХрдиреНрдлрд░реНрдореЗрд╢рди рдореИрд╕реЗрдЬ
        await update.message.reply_text(
            f"тЬЕ рдЖрдкрдХрд╛ рд╡реЛрдЯ **{channel_id}** рдЪреИрдирд▓ рдореЗрдВ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ!\n"
            f"рдпреВрдЬрд░ рд▓реЙрдЧ рдореИрд╕реЗрдЬ рдЖрдкрдХреЗ рдХрдиреЗрдХреНрд╢рди рдЪреИрдирд▓ ({CHANNEL_USERNAME}) рдореЗрдВ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред"
        )
        # рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВ
        return ConversationHandler.END 

    except Exception as e:
        await update.message.reply_text(f"рд╡реЛрдЯ рднреЗрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}")
        return CREATE_POLL

# --- рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд░рджреНрдж рдХрд░реЗрдВ ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рдХреЛ рд░рджреНрдж рдХрд░рддрд╛ рд╣реИред"""
    await update.message.reply_text('рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд░рджреНрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред')
    return ConversationHandler.END

# --- рдореБрдЦреНрдп рдлрд╝рдВрдХреНрд╢рди ---
def main():
    """рдмреЙрдЯ рд╢реБрд░реВ рдХрд░рдиреЗ рдХрд╛ рдореБрдЦреНрдп рдлрд╝рдВрдХреНрд╢рдиред"""
    if not BOT_TOKEN:
        logging.error("BOT_TOKEN environment variable рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред")
        return

    # ApplicationBuilder рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ Application рдЗрдВрд╕реНрдЯреЗрдВрд╕ рдмрдирд╛рдПрдВ
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # 1. /start рдХрдорд╛рдВрдб рд╣реИрдВрдбрд▓рд░
    application.add_handler(CommandHandler("start", start))

    # 2. рдирдпрд╛ рдкреЛрд▓ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╣реИрдВрдбрд▓рд░
    poll_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^/poll\b'), create_poll), # /poll рд╕реЗ рд╢реБрд░реВ рд╣реЛрдиреЗ рд╡рд╛рд▓реЗ рдореИрд╕реЗрдЬ
            MessageHandler(filters.Regex('^ЁЯУЭ рдирдпрд╛ рд╡реЛрдЯ рдмрдирд╛рдПрдБ \(рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП\)'), start_channel_poll_conversation) # In-line рдмрдЯрди рдХреНрд▓рд┐рдХ
        ],
        states={
            GET_CHANNEL_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_channel_id)],
            CREATE_POLL: [MessageHandler(filters.Regex('^/poll\b'), create_channel_poll)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # 3. рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╣реИрдВрдбрд▓рд░ рдЬреЛрдбрд╝реЗрдВ
    application.add_handler(poll_conv_handler)
    application.add_handler(MessageHandler(filters.Regex('^/poll\b'), create_poll)) # рд╕рд┐рдВрдкрд▓ рдкреЛрд▓ рдХреЗ рд▓рд┐рдП рднреА

    # рдмреЙрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ
    logging.info(f"рдмреЙрдЯ рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ: @{application.bot.username}")
    application.run_polling(poll_interval=3)
    
if __name__ == '__main__':
    main()
