import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, 
    ContextTypes, 
    CommandHandler, 
    MessageHandler, 
    filters,
    ConversationHandler,
    CallbackQueryHandler # CallbackQueryHandler рдЗрдореНрдкреЛрд░реНрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛
)

# .env рдлрд╝рд╛рдЗрд▓ рд╕реЗ environment variables рд▓реЛрдб рдХрд░реЗрдВ
load_dotenv()

# рд▓реЙрдЧрд┐рдВрдЧ рд╕реЗрдЯ рдХрд░реЗрдВ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# рдПрдирд╡рд╛рдпрд░реНрдирдореЗрдВрдЯ рд╡реЗрд░рд┐рдПрдмрд▓реНрд╕ рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рд▓реЗрдВ
BOT_TOKEN = os.getenv("BOT_TOKEN")
# IMAGE_URL рдХреЛ .env рд╕реЗ рд▓рд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛, рдЕрдЧрд░ рдирд╣реАрдВ рдорд┐рд▓рд╛ рддреЛ default URL
IMAGE_URL = os.getenv("IMAGE_URL", "https://picsum.photos/600/300") 
# LOG_CHANNEL_USERNAME рдХреЛ .env рд╕реЗ рд▓рд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛
LOG_CHANNEL_USERNAME = os.getenv("LOG_CHANNEL_USERNAME", "@teamrajweb") 

# рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╕реНрдЯреЗрдЯреНрд╕
(GET_CHANNEL_ID, CREATE_CHANNEL_POLL) = range(2) # CHECK_ADMIN рдХреА рдЬрд╝рд░реВрд░рдд рдирд╣реАрдВ, рд╕реАрдзреЗ GET_CHANNEL_ID рдореЗрдВ рдЪреЗрдХ рд╣реЛрдЧрд╛

# --- Utility Functions ---

def parse_poll_command(args: list) -> tuple | None:
    """/poll рдХрдорд╛рдВрдб рд╕реЗ рд╕рд╡рд╛рд▓ рдФрд░ рд╡рд┐рдХрд▓реНрдкреЛрдВ рдХреЛ рдкрд╛рд░реНрд╕ рдХрд░рддрд╛ рд╣реИред"""
    full_text = " ".join(args)
    if '?' not in full_text:
        return None # Format error
    
    try:
        question, options_str = full_text.split('?', 1)
        question = question.strip()
        options = [opt.strip() for opt in options_str.split(',') if opt.strip()]
        
        if not question or len(options) < 2 or len(options) > 10:
            return None # Invalid poll data
        
        return question, options
    except:
        return None

# --- Core Bot Functions ---

# FAILED IMAGE LOAD рдкрд░ рдореИрд╕реЗрдЬ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рдЕрд▓рдЧ рдлрд╝рдВрдХреНрд╢рди
async def send_start_message(update: Update, context: ContextTypes.DEFAULT_TYPE, reply_markup: InlineKeyboardMarkup, welcome_message: str):
    """рдЗрдореЗрдЬ рдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдХреЗ рд╕рд╛рде рд╕реНрдЯрд╛рд░реНрдЯ рдореИрд╕реЗрдЬ рднреЗрдЬрддрд╛ рд╣реИред"""
    try:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=IMAGE_URL,
            caption=welcome_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"Image send failed: {e}. Sending text message instead.")
        await update.message.reply_text(
            welcome_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

# 1. /start рдХрдорд╛рдВрдб рдХреЗ рд▓рд┐рдП рдлрд╝рдВрдХреНрд╢рди (ADVANCED)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рдПрдХ рдПрдбрд╡рд╛рдВрд╕ рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢ рдФрд░ рдЗрдирд▓рд╛рдЗрди рдмрдЯрдиреНрд╕ рднреЗрдЬрддрд╛ рд╣реИред"""
    
    # Stylish Inline Buttons
    keyboard = [
        [
            InlineKeyboardButton("ЁЯУЭ рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП рд╡реЛрдЯ рдмрдирд╛рдПрдБ", callback_data='start_channel_poll_conv'),
        ],
        [
            InlineKeyboardButton("ЁЯУК рдореЗрд░реЗ рдмрдирд╛рдП рд╡реЛрдЯреНрд╕", callback_data='my_polls_list'),
            InlineKeyboardButton("тЭУ рдЧрд╛рдЗрдб/рдорджрдж", url='https://t.me/teamrajweb')
        ],
        [
            InlineKeyboardButton("ЁЯФЧ рд╕реЛрд░реНрд╕ рдХреЛрдб", url='https://t.me/teamrajweb'),
            InlineKeyboardButton("ЁЯУв рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░реЗрдВ", url='https://t.me/narzoxbot')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Advanced Welcome Message
    welcome_message = (
        "**ЁЯСС рд╡реЛрдЯ рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯСС**\n\n"
        "рдореИрдВ рдХрд┐рд╕реА рднреА рдЧреНрд░реБрдк рдпрд╛ рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП **рд╕реБрдВрджрд░ рдФрд░ рд╕реБрд░рдХреНрд╖рд┐рдд** рд╡реЛрдЯ рдмрдирд╛рдиреЗ рдореЗрдВ рдорд╛рд╣рд┐рд░ рд╣реВрдБред "
        "рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП рд╡реЛрдЯ рдмрдирд╛рдиреЗ рд╣реЗрддреБ *'ЁЯУЭ рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП рд╡реЛрдЯ рдмрдирд╛рдПрдБ'* рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред\n\n"
        "__**Stylish Quote:**__\n"
        "*\"рдЖрдкрдХреЗ рд╡рд┐рдЪрд╛рд░ рдорд╛рдпрдиреЗ рд░рдЦрддреЗ рд╣реИрдВред рд╡реЛрдЯ рджреЗрдВ, рдмрджрд▓рд╛рд╡ рд▓рд╛рдПрдБред\"*\n"
        "~ The Voting Bot"
    )
    
    await send_start_message(update, context, reply_markup, welcome_message)

# 2. рд╕рд╛рдзрд╛рд░рдг /poll рдХрдорд╛рдВрдб рдХреЗ рд▓рд┐рдП рдлрд╝рдВрдХреНрд╢рди (BUG FIX: NameError resolve)
async def create_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рд╕рд╛рдзрд╛рд░рдг рдЪреИрдЯ рдореЗрдВ рдПрдХ рд╡реЛрдЯ рдмрдирд╛рддрд╛ рд╣реИред"""
    
    parsed_data = parse_poll_command(context.args)
    if not parsed_data:
        await update.message.reply_text(
            "рдХреГрдкрдпрд╛ рд╕рд╣реА рдлреЙрд░реНрдореЗрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ:\n"
            "`/poll [рд╕рд╡рд╛рд▓]? [рдСрдкреНрд╢рди1], [рдСрдкреНрд╢рди2], ...`"
            "\n(рдХрдо рд╕реЗ рдХрдо 2 рдФрд░ рдЕрдзрд┐рдХрддрдо 10 рд╡рд┐рдХрд▓реНрдк)"
            , parse_mode='Markdown'
        )
        return

    question, options = parsed_data
    
    await context.bot.send_poll(
        chat_id=update.effective_chat.id,
        question=question,
        options=options,
        is_anonymous=False, 
        allows_multiple_answers=False, 
    )

    await update.message.reply_text("тЬЕ рдЖрдкрдХрд╛ рд╡реЛрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдмрдирд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ!")


# --- Conversation Handlers ---

# 3. рдЪреИрдирд▓ рдкреЛрд▓ рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╢реБрд░реВ рдХрд░реЗрдВ (Callback Handler)
async def start_channel_poll_conversation_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback query рд╕реЗ рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╢реБрд░реВ рдХрд░рддрд╛ рд╣реИред"""
    query = update.callback_query
    await query.answer()
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="ЁЯСЛ **рдЪреИрдирд▓ рд╕реЗрдЯрдЕрдк:**\n"
             "рдХреГрдкрдпрд╛ рдЙрд╕ **рдЪреИрдирд▓ рдХрд╛ @username рдпрд╛ ID** рднреЗрдЬреЗрдВ рдЬрд┐рд╕рдХреЗ рд▓рд┐рдП рдЖрдк рд╡реЛрдЯ рдмрдирд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред\n\n"
             "*(рдЙрджрд╛рд╣рд░рдг: `@my_channel_name` рдпрд╛ `-100123456789`)*"
             "\n\n**рдиреЛрдЯ:** рдореБрдЭреЗ рдЗрд╕ рдЪреИрдирд▓ рдХрд╛ **рдПрдбрдорд┐рди** рд╣реЛрдирд╛ рдЬрд╝рд░реВрд░реА рд╣реИред",
        parse_mode='Markdown'
    )
    return GET_CHANNEL_ID 

# 4. рдЪреИрдирд▓ ID рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ рдФрд░ рдПрдбрдорд┐рди рдЪреЗрдХ рдХрд░реЗрдВ
async def get_channel_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рдпреВрдЬрд░ рд╕реЗ рдЪреИрдирд▓ ID рдкреНрд░рд╛рдкреНрдд рдХрд░рддрд╛ рд╣реИ рдФрд░ рдмреЙрдЯ рдПрдбрдорд┐рди рдХреА рдЬрд╛рдБрдЪ рдХрд░рддрд╛ рд╣реИред"""
    channel_id_input = update.message.text.strip()
    
    # рдЕрдЧрд░ username рд╣реИ рддреЛ '@' рд▓рдЧрд╛ рджреЗрдВ, рдЕрдЧрд░ ID рд╣реИ рддреЛ рд░рд╣рдиреЗ рджреЗрдВ
    channel_id = channel_id_input if channel_id_input.startswith(('@', '-')) else f"@{channel_id_input}"
    
    context.user_data['temp_channel_id'] = channel_id

    try:
        # рдмреЙрдЯ рдХреА рдПрдбрдорд┐рди рд╕реНрдерд┐рддрд┐ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ
        chat_member = await context.bot.get_chat_member(chat_id=channel_id, user_id=context.bot.id)
        
        if chat_member.status in ['administrator', 'creator']:
            await update.message.reply_text(
                "тЬЕ рдмреЙрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЪреИрдирд▓ **рдПрдбрдорд┐рди** рд╣реИред\n"
                "рдЕрдм рдЖрдк рдЕрдкрдирд╛ рд╡реЛрдЯ рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВред рдХреГрдкрдпрд╛ **`/poll [рд╕рд╡рд╛рд▓]? [рдСрдкреНрд╢рди1], [рдСрдкреНрд╢рди2], ...`** рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рднреЗрдЬреЗрдВред\n"
                "*(рдпрд╛ /cancel рджрдмрд╛рдХрд░ рд░рджреНрдж рдХрд░реЗрдВ)*",
                parse_mode='Markdown'
            )
            return CREATE_CHANNEL_POLL 
        else:
            await update.message.reply_text(
                "тЭМ рдореИрдВ рдЖрдкрдХреЗ рдЪреИрдирд▓ рдХрд╛ **рдПрдбрдорд┐рди рдирд╣реАрдВ** рд╣реВрдБред\n"
                "рдХреГрдкрдпрд╛ рдореБрдЭреЗ рдПрдбрдорд┐рди (рдХрдо рд╕реЗ рдХрдо **'Post Messages'** рдХреА рдЕрдиреБрдорддрд┐ рдХреЗ рд╕рд╛рде) рдмрдирд╛рдПрдБ рдФрд░ рдлрд┐рд░ рд╕реЗ рдЪреИрдирд▓ рдХрд╛ @username рднреЗрдЬреЗрдВред"
            )
            return GET_CHANNEL_ID 

    except Exception as e:
        logging.error(f"Error checking admin status: {e}")
        await update.message.reply_text(
            f"тЪая╕П **рдЪреИрдирд▓ рддрдХ рдкрд╣реБрдБрдЪрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐** рд╣реБрдИред рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐:\n"
            "1. рдЪреИрдирд▓ рдХрд╛ @username/ID рд╕рд╣реА рд╣реИред\n"
            "2. рдЪреИрдирд▓ **рдкрдмреНрд▓рд┐рдХ** рд╣реИ рдпрд╛ рдЖрдкрдиреЗ рдореБрдЭреЗ рдЪреИрдирд▓ рдореЗрдВ **рдПрдбрдорд┐рди** рдХреЗ рд░реВрдк рдореЗрдВ рдЬреЛрдбрд╝рд╛ рд╣реИред"
        )
        return GET_CHANNEL_ID 

# 5. /poll рдХрдорд╛рдВрдб (рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП)
async def create_channel_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рдЪреИрдирд▓ рдореЗрдВ рд╡реЛрдЯ рдмрдирд╛рддрд╛ рд╣реИ рдФрд░ рд▓реЙрдЧ рдЪреИрдирд▓ рдореЗрдВ рд╕реВрдЪрдирд╛ рднреЗрдЬрддрд╛ рд╣реИред"""
    
    channel_id = context.user_data.get('temp_channel_id')
    user = update.effective_user

    # Poll data parse рдХрд░реЗрдВ
    parsed_data = parse_poll_command(update.message.text.split(' ')[1:])
    if not parsed_data:
        await update.message.reply_text("рд╡реЛрдЯ рдХрд╛ рдлреЙрд░реНрдореЗрдЯ рдЧрд▓рдд рд╣реИред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")
        return CREATE_CHANNEL_POLL

    question, options = parsed_data
    
    # 2. рдЪреИрдирд▓ рдореЗрдВ рд╡реЛрдЯ рднреЗрдЬреЗрдВ
    try:
        poll_message = await context.bot.send_poll(
            chat_id=channel_id,
            question=question,
            options=options,
            is_anonymous=False, # рдЬреИрд╕рд╛ рдЖрдкрдиреЗ рдЕрдиреБрд░реЛрдз рдХрд┐рдпрд╛
            allows_multiple_answers=False,
        )

        # 3. рд▓реЙрдЧ рдЪреИрдирд▓ рдореЗрдВ рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ (рдпреВрдЬрд░ рдФрд░ рд╡реЛрдЯ рдбрд┐рдЯреЗрд▓реНрд╕)
        deep_link_payload = f"poll_{poll_message.message_id}_{str(channel_id).replace('@', '')}"
        
        welcome_keyboard = [[
            InlineKeyboardButton(
                f"ЁЯСЛ {user.first_name} рд╕реЗ рдЬреБрдбрд╝реЗрдВ!", 
                url=f"https://t.me/{context.bot.username}?start={deep_link_payload}"
            )
        ]]
        welcome_markup = InlineKeyboardMarkup(welcome_keyboard)
        
        channel_welcome_message = (
            f"**ЁЯУК рдирдпрд╛ рдЪреИрдирд▓ рд╡реЛрдЯ рдмрдирд╛!**\n\n"
            f"рдпрд╣ рд╡реЛрдЯ рдпреВрдЬрд░ рджреНрд╡рд╛рд░рд╛ рдмрдирд╛рдпрд╛ рдЧрдпрд╛ рд╣реИ:\n"
            f"ЁЯСд **рдирд╛рдо:** [{user.first_name}](tg://user?id={user.id})\n"
            f"ЁЯЖФ **ID:** `{user.id}`\n"
            f"ЁЯМР **Username:** {f'@{user.username}' if user.username else 'N/A'}\n"
            f"ЁЯФЧ **рдЪреИрдирд▓:** `{channel_id}`\n\n"
            f"рдЗрд╕ рдпреВрдЬрд░ рд╕реЗ рдЬреБрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред\n"
        )

        if LOG_CHANNEL_USERNAME:
            try:
                # LOG_CHANNEL_USERNAME рдореЗрдВ рдлреЛрдЯреЛ рдФрд░ рдбрд┐рдЯреЗрд▓реНрд╕ рднреЗрдЬреЗрдВ
                await context.bot.send_photo(
                    chat_id=LOG_CHANNEL_USERNAME,
                    photo=IMAGE_URL,
                    caption=channel_welcome_message,
                    parse_mode='Markdown',
                    reply_markup=welcome_markup
                )
            except Exception as log_e:
                logging.error(f"Failed to send log message to channel: {log_e}")
        
        await update.message.reply_text(
            f"тЬЕ рдЖрдкрдХрд╛ рд╡реЛрдЯ **{channel_id}** рдЪреИрдирд▓ рдореЗрдВ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ!\n"
            f"рд▓реЙрдЧ рдореИрд╕реЗрдЬ **{LOG_CHANNEL_USERNAME}** рдореЗрдВ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред",
            parse_mode='Markdown'
        )
        return ConversationHandler.END 

    except Exception as e:
        await update.message.reply_text(f"рд╡реЛрдЯ рднреЗрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}")
        return CREATE_CHANNEL_POLL

# 6. рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд░рджреНрдж рдХрд░реЗрдВ
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рдХреЛ рд░рджреНрдж рдХрд░рддрд╛ рд╣реИред"""
    await update.message.reply_text('рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд░рджреНрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред')
    return ConversationHandler.END

# --- рдореБрдЦреНрдп рдлрд╝рдВрдХреНрд╢рди ---
def main():
    """рдмреЙрдЯ рд╢реБрд░реВ рдХрд░рдиреЗ рдХрд╛ рдореБрдЦреНрдп рдлрд╝рдВрдХреНрд╢рдиред"""
    if not BOT_TOKEN:
        logging.error("BOT_TOKEN environment variable рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред")
        return

    # ApplicationBuilder рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ Application рдЗрдВрд╕реНрдЯреЗрдВрд╕ рдмрдирд╛рдПрдВ (рдирдпрд╛ рддрд░реАрдХрд╛)
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # 1. /start рдХрдорд╛рдВрдб рд╣реИрдВрдбрд▓рд░
    application.add_handler(CommandHandler("start", start))

    # 2. рд╕рд╛рдзрд╛рд░рдг /poll рдХрдорд╛рдВрдб рд╣реИрдВрдбрд▓рд░ (BUG FIX)
    application.add_handler(CommandHandler("poll", create_poll))

    # 3. рдЪреИрдирд▓ рдкреЛрд▓ рдХреЗ рд▓рд┐рдП рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╣реИрдВрдбрд▓рд░
    poll_conv_handler = ConversationHandler(
        entry_points=[
            # 'ЁЯУЭ рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП рд╡реЛрдЯ рдмрдирд╛рдПрдБ' рдмрдЯрди рд╕реЗ рд╢реБрд░реВ
            CallbackQueryHandler(start_channel_poll_conversation_cb, pattern='^start_channel_poll_conv$'),
        ],
        states={
            GET_CHANNEL_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_channel_id)],
            CREATE_CHANNEL_POLL: [MessageHandler(filters.COMMAND('poll'), create_channel_poll)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # 4. рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╣реИрдВрдбрд▓рд░ рдЬреЛрдбрд╝реЗрдВ
    application.add_handler(poll_conv_handler)
    
    # рдмреЙрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ
    logging.info(f"рдмреЙрдЯ рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ...")
    application.run_polling(poll_interval=3)
    
if __name__ == '__main__':
    main()
