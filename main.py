import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler

# .env рдлрд╝рд╛рдЗрд▓ рд╕реЗ environment variables рд▓реЛрдб рдХрд░реЗрдВ
load_dotenv()

# рд▓реЙрдЧрд┐рдВрдЧ (Logging) рд╕реЗрдЯ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдЖрдкрдХреЛ рдкрддрд╛ рдЪрд▓реЗ рдХрд┐ рдХреНрдпрд╛ рд╣реЛ рд░рд╣рд╛ рд╣реИ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдмреЙрдЯ рдЯреЛрдХрди рдФрд░ рдПрдХ рд╡реИрдХрд▓реНрдкрд┐рдХ рдЗрдореЗрдЬ URL рдХреЛ environment variable рд╕реЗ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
BOT_TOKEN = os.getenv("BOT_TOKEN")
# рдиреЛрдЯ: рдЖрдк рдЗрд╕ URL рдХреЛ Render/GitHub/Telegram рдХреЗ рдлрд╝рд╛рдЗрд▓ ID рд╕реЗ рдмрджрд▓ рд╕рдХрддреЗ рд╣реИрдВ 
# рдпрд╛ рдЗрд╕реЗ local storage рд╕реЗ рд▓реЛрдб рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдлрд╛рдЗрд▓ рдкрд╛рде рджреЗ рд╕рдХрддреЗ рд╣реИрдВред
IMAGE_URL = "https://envs.sh/KXK.jpg/IMG20251003570.jpg" 

# /start рдХрдорд╛рдВрдб рдХреЗ рд▓рд┐рдП рдлрд╝рдВрдХреНрд╢рди (ADVANCED)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рдПрдХ рдПрдбрд╡рд╛рдВрд╕ рд╕реНрд╡рд╛рдЧрдд рд╕рдВрджреЗрд╢, рдЗрдореЗрдЬ, рдФрд░ рдЗрдирд▓рд╛рдЗрди рдмрдЯрдиреНрд╕ рднреЗрдЬрддрд╛ рд╣реИред"""
    
    # 1. рд╕реНрдЯрд╛рдЗрд▓рд┐рд╢ рдЗрдирд▓рд╛рдЗрди рдмрдЯрдиреНрд╕ рдмрдирд╛рдПрдБ
    keyboard = [
        [
            InlineKeyboardButton("ЁЯУЭ рдирдпрд╛ рд╡реЛрдЯ рдмрдирд╛рдПрдБ", callback_data='create_new_poll'),
            InlineKeyboardButton("тЭУ рдЧрд╛рдЗрдб/рдорджрдж", url='https://t.me/teamrajweb')
        ],
        [
            InlineKeyboardButton("ЁЯУК рдореЗрд░реЗ рдмрдирд╛рдП рд╡реЛрдЯреНрд╕", callback_data='my_polls_list'),
            InlineKeyboardButton("ЁЯФЧ рд╕реЛрд░реНрд╕ рдХреЛрдб", url='https://t.me/teamrajweb')
        ],
        [
            InlineKeyboardButton("ЁЯУв рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░реЗрдВ", url='https://t.me/narzoxbot)
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # 2. рдПрдбрд╡рд╛рдВрд╕ рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ
    welcome_message = (
        "**ЁЯОЙ рд╡реЛрдЯ рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯОЙ**\n\n"
        "рдореИрдВ рдЧреНрд░реБрдкреНрд╕ рдФрд░ рдЪреИрдЯреНрд╕ рдореЗрдВ рдЖрд╕рд╛рдиреА рд╕реЗ рд╡реЛрдЯ рдмрдирд╛рдиреЗ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рддрд╛ рд╣реВрдБред "
        "рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрдиреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдЕрдкрдиреА рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВред\n\n"
        "**_рдПрдбрд╡рд╛рдВрд╕ рдлреАрдЪрд░:_** рдЖрдк рдЕрдкрдиреЗ рд╡реЛрдЯ рдореЗрдВ рдЗрдореЛрдЬреА рдФрд░ рд▓рд┐рдВрдХ рднреА рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ!\n\n"
        "**_Quote:_**\n"
        "\"рд╕рдлрд▓рддрд╛ рдХрд╛ рд░рд╣рд╕реНрдп рдорддрджрд╛рди рд╣реИ: рд╣рд░ рдЖрд╡рд╛рдЬрд╝ рдорд╛рдпрдиреЗ рд░рдЦрддреА рд╣реИред\"\n"
        "~ Voting System"
    )
    
    # 3. рдЗрдореЗрдЬ рдХреЗ рд╕рд╛рде рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ
    try:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=IMAGE_URL,
            caption=welcome_message,
            parse_mode='Markdown', # рдореИрд╕реЗрдЬ рдореЗрдВ **bold** рдФрд░ _italic_ рдлреЙрд░реНрдореЗрдЯрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП
            reply_markup=reply_markup
        )
    except Exception as e:
        # рдЕрдЧрд░ рдЗрдореЗрдЬ рд▓реЛрдб рдирд╣реАрдВ рд╣реЛрддреА рд╣реИ, рддреЛ рд╕рд┐рд░реНрдлрд╝ рдЯреЗрдХреНрд╕реНрдЯ рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ
        logging.error(f"Image send failed: {e}. Sending text message instead.")
        await update.message.reply_text(
            welcome_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )


# /poll рдХрдорд╛рдВрдб рдХреЗ рд▓рд┐рдП рдлрд╝рдВрдХреНрд╢рди (рдкрд┐рдЫрд▓рд╛ рдХреЛрдб)
async def create_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """рдпреВрдЬрд░ рдХреЗ рдЗрдирдкреБрдЯ рд╕реЗ рдПрдХ рдирдпрд╛ рд╡реЛрдЯ (poll) рдмрдирд╛рддрд╛ рд╣реИ рдФрд░ рднреЗрдЬрддрд╛ рд╣реИред"""
    args = context.args
    
    # рдЪреЗрдХ рдХрд░реЗрдВ рдХрд┐ рдЗрдирдкреБрдЯ рд╕рд╣реА рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рд╣реИ рдпрд╛ рдирд╣реАрдВ
    if not args:
        await update.message.reply_text(
            "рдХреГрдкрдпрд╛ рд╕рд╣реА рдлреЙрд░реНрдореЗрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ: /poll [рд╕рд╡рд╛рд▓]? [рдСрдкреНрд╢рди1], [рдСрдкреНрд╢рди2], ..."
        )
        return

    full_text = " ".join(args)
    
    # рд╕рд╡рд╛рд▓ рдФрд░ рдСрдкреНрд╢рдВрд╕ рдХреЛ рдЕрд▓рдЧ рдХрд░реЗрдВ
    if '?' not in full_text:
        await update.message.reply_text(
            "рд╕рд╡рд╛рд▓ рдХреЗ рдмрд╛рдж '?' рдЪрд┐рд╣реНрди рдЬрд╝рд░реВрд░ рд▓рдЧрд╛рдПрдБред\n"
            "рдЙрджрд╛рд╣рд░рдг: /poll рдЖрдЬ рдЦрд╛рдиреЗ рдореЗрдВ рдХреНрдпрд╛ рд╣реИ? рджрд╛рд▓-рдЪрд╛рд╡рд▓, рд░реЛрдЯреА-рд╕рдмреНрдЬреА, рдкрд┐рдЬреНрдЬрд╛"
        )
        return

    try:
        # '?' рдкрд░ рд╕реНрдкреНрд▓рд┐рдЯ (split) рдХрд░реЗрдВ
        question, options_str = full_text.split('?', 1)
        question = question.strip()
        options = [opt.strip() for opt in options_str.split(',') if opt.strip()]
    except ValueError:
        await update.message.reply_text("рдЗрдирдкреБрдЯ рдлреЙрд░реНрдореЗрдЯ рдЧрд▓рдд рд╣реИред рдХреГрдкрдпрд╛ рдЬрд╛рдВрдЪ рдХрд░реЗрдВред")
        return

    # рдСрдкреНрд╢рдВрд╕ рдХреА рд╕рдВрдЦреНрдпрд╛ рдЪреЗрдХ рдХрд░реЗрдВ (рдЯреЗрд▓реАрдЧреНрд░рд╛рдо рдХреЛ 2-10 рдСрдкреНрд╢рди рдЪрд╛рд╣рд┐рдП)
    if len(options) < 2 or len(options) > 10:
        await update.message.reply_text(
            f"рд╡реЛрдЯ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП 2 рд╕реЗ 10 рд╡рд┐рдХрд▓реНрдк (options) рд╣реЛрдиреЗ рдЪрд╛рд╣рд┐рдПред "
            f"рдЖрдкрдХреЛ рдорд┐рд▓реЗ: {len(options)}"
        )
        return

    # рд╡реЛрдЯ (poll) рднреЗрдЬреЗрдВ
    await context.bot.send_poll(
        chat_id=update.effective_chat.id,
        question=question,
        options=options,
        is_anonymous=False, 
        allows_multiple_answers=False, 
    )

    await update.message.reply_text("рдЖрдкрдХрд╛ рд╡реЛрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдмрдирд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ!")

# рдореБрдЦреНрдп рдлрд╝рдВрдХреНрд╢рди
def main():
    """рдмреЙрдЯ рд╢реБрд░реВ рдХрд░рдиреЗ рдХрд╛ рдореБрдЦреНрдп рдлрд╝рдВрдХреНрд╢рдиред"""
    if not BOT_TOKEN:
        logging.error("BOT_TOKEN environment variable рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ .env рдлрд╝рд╛рдЗрд▓ рдЪреЗрдХ рдХрд░реЗрдВред")
        return

    # ApplicationBuilder рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ Application рдЗрдВрд╕реНрдЯреЗрдВрд╕ рдмрдирд╛рдПрдВ
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # рдХрдорд╛рдВрдб рд╣реИрдВрдбрд▓рд░ рдЬреЛрдбрд╝реЗрдВ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("poll", create_poll))

    # рдмреЙрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ
    logging.info("рдмреЙрдЯ рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ...")
    application.run_polling(poll_interval=3)
    
if __name__ == '__main__':
    main()
