import os
import re
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# .env рдлрд╝рд╛рдЗрд▓ рд╕реЗ environment variables рд▓реЛрдб рдХрд░реЗрдВ
load_dotenv()

# рд▓реЙрдЧрд┐рдВрдЧ рд╕реЗрдЯ рдХрд░реЗрдВ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# рдПрдирд╡рд╛рдпрд░реНрдирдореЗрдВрдЯ рд╡реЗрд░рд┐рдПрдмрд▓реНрд╕ рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рд▓реЗрдВ
BOT_TOKEN = os.getenv("BOT_TOKEN")
IMAGE_URL = os.getenv("IMAGE_URL", "https://picsum.photos/600/300")
LOG_CHANNEL_USERNAME = os.getenv("LOG_CHANNEL_USERNAME", "@teamrajweb")

# рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╕реНрдЯреЗрдЯреНрд╕
(GET_CHANNEL_ID, CREATE_CHANNEL_POLL) = range(2)


# -------------------------
# Utility / Parsing Helpers
# -------------------------
def parse_poll_from_args(args: list) -> tuple | None:
    """
    рдкреБрд░рд╛рдиреЗ рддрд░реАрдХреЗ рд╕реЗ рдЬрдм context.args рджрд┐рдП рд╣реЛрдВ (list of tokens),
    рддрдм parse рдХрд░рддрд╛ рд╣реИред рдпрд╣ рддрднреА рддрдм useful рд╣реИ рдЬрдм handler CommandHandler рд╕реЗ рдЖрддрд╛ рд╣реЛред
    """
    if not args:
        return None
    full_text = " ".join(args)
    return parse_poll_from_text(full_text)


def parse_poll_from_text(text: str) -> tuple | None:
    """
    рдХрд┐рд╕реА raw text рдореЗрдВ рд╕реЗ poll parse рдХрд░реЗрдВред format рдЕрдкреЗрдХреНрд╖рд┐рдд рд╣реИ:
       <question>? <option1>, <option2>, ...
    '?' рд╣реЛрдирд╛ рдЕрдирд┐рд╡рд╛рд░реНрдп рдорд╛рдирд╛ рдЧрдпрд╛ рд╣реИ (рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ рдЗрд╕реЗ optional рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ)ред
    """
    if not text or '?' not in text:
        return None
    try:
        question_part, options_part = text.split('?', 1)
        question = question_part.strip()
        # рдЕрдЧрд░ options_part рдореЗрдВ leading /poll рд░рд╣реЗ рддреЛ рдЙрд╕реЗ рд╣рдЯрд╛рдПрдБ (safety)
        options_part = options_part.strip()
        # options comma рд╕реЗ split
        options = [opt.strip() for opt in options_part.split(',') if opt.strip()]
        if not question or len(options) < 2 or len(options) > 10:
            return None
        return question, options
    except Exception as e:
        logging.exception("parse_poll_from_text failed")
        return None


# -------------------------
# Core Bot Functions
# -------------------------
async def send_start_message(update: Update, context: ContextTypes.DEFAULT_TYPE, reply_markup: InlineKeyboardMarkup, welcome_message: str):
    """
    рдЗрдореЗрдЬ рдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдХреЗ рд╕рд╛рде рд╕реНрдЯрд╛рд░реНрдЯ рдореИрд╕реЗрдЬ рднреЗрдЬрддрд╛ рд╣реИред safe fallback рдЬрдм update.message None рд╣реЛред
    """
    try:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=IMAGE_URL,
            caption=welcome_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"Image send failed: {e}. Sending text message instead.")
        # safe fallback: рдЕрдЧрд░ update.message рдореМрдЬреВрдж рд╣реИ рддреЛ рд╡рд╣реА use рдХрд░реЗрдВ, рдирд╣реАрдВ рддреЛ context.bot.send_message
        try:
            if getattr(update, "message", None):
                await update.message.reply_text(
                    welcome_message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=welcome_message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
        except Exception:
            logging.exception("Failed to send fallback welcome message")


# 1. /start рдХрдорд╛рдВрдб
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("ЁЯУЭ рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП рд╡реЛрдЯ рдмрдирд╛рдПрдБ", callback_data='start_channel_poll_conv')],
        [InlineKeyboardButton("ЁЯУК рдореЗрд░реЗ рдмрдирд╛рдП рд╡реЛрдЯреНрд╕", callback_data='my_polls_list'),
         InlineKeyboardButton("тЭУ рдЧрд╛рдЗрдб/рдорджрдж", url='https://t.me/teamrajweb')],
        [InlineKeyboardButton("ЁЯФЧ рд╕реЛрд░реНрд╕ рдХреЛрдб", url='https://t.me/teamrajweb'),
         InlineKeyboardButton("ЁЯУв рдЪреИрдирд▓ рдЬреЙрдЗрди рдХрд░реЗрдВ", url='https://t.me/narzoxbot')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_message = (
        "**ЁЯСС рд╡реЛрдЯ рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯСС**\n\n"
        "рдореИрдВ рдХрд┐рд╕реА рднреА рдЧреНрд░реБрдк рдпрд╛ рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП **рд╕реБрдВрджрд░ рдФрд░ рд╕реБрд░рдХреНрд╖рд┐рдд** рд╡реЛрдЯ рдмрдирд╛рдиреЗ рдореЗрдВ рдорд╛рд╣рд┐рд░ рд╣реВрдБред "
        "рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП рд╡реЛрдЯ рдмрдирд╛рдиреЗ рд╣реЗрддреБ *'ЁЯУЭ рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП рд╡реЛрдЯ рдмрдирд╛рдПрдБ'* рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред\n\n"
        "__**Stylish Quote:**__\n"
        "*\"рдЖрдкрдХреЗ рд╡рд┐рдЪрд╛рд░ рдорд╛рдпрдиреЗ рд░рдЦрддреЗ рд╣реИрдВред рд╡реЛрдЯ рджреЗрдВ, рдмрджрд▓рд╛рд╡ рд▓рд╛рдПрдБред\"*\n"
        "~ The Voting Bot"
    )

    await send_start_message(update, context, reply_markup, welcome_message)


# 2. рд╕рд╛рдзрд╛рд░рдг /poll рдХрдорд╛рдВрдб (chat рдореЗрдВ)
async def create_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # context.args рд╕реЗ parse рдХрд░рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢
    parsed = parse_poll_from_args(context.args)
    if not parsed:
        # fallback: рдкреВрд░рд╛ message text рд╕реЗ parse рдХрд░рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢
        text = ""
        if update.message and update.message.text:
            # remove the command token (/poll or /poll@BotName)
            text = re.sub(r'^/poll(@\w+)?\s*', '', update.message.text, count=1)
        parsed = parse_poll_from_text(text)

    if not parsed:
        await update.message.reply_text(
            "рдХреГрдкрдпрд╛ рд╕рд╣реА рдлреЙрд░реНрдореЗрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ:\n"
            "`/poll [рд╕рд╡рд╛рд▓]? [рдСрдкреНрд╢рди1], [рдСрдкреНрд╢рди2], ...`\n(рдХрдо рд╕реЗ рдХрдо 2 рдФрд░ рдЕрдзрд┐рдХрддрдо 10 рд╡рд┐рдХрд▓реНрдк)",
            parse_mode='Markdown'
        )
        return

    question, options = parsed
    try:
        await context.bot.send_poll(
            chat_id=update.effective_chat.id,
            question=question,
            options=options,
            is_anonymous=False,
            allows_multiple_answers=False,
        )
        await update.message.reply_text("тЬЕ рдЖрдкрдХрд╛ рд╡реЛрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдмрдирд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ!")
    except Exception as e:
        logging.exception("Failed to send poll in chat")
        await update.message.reply_text(f"рд╡реЛрдЯ рднреЗрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}")


# 3. Callback рд╕реЗ рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд╢реБрд░реВ рдХрд░рдирд╛
async def start_channel_poll_conversation_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="ЁЯСЛ **рдЪреИрдирд▓ рд╕реЗрдЯрдЕрдк:**\n"
             "рдХреГрдкрдпрд╛ рдЙрд╕ **рдЪреИрдирд▓ рдХрд╛ @username рдпрд╛ ID** рднреЗрдЬреЗрдВ рдЬрд┐рд╕рдХреЗ рд▓рд┐рдП рдЖрдк рд╡реЛрдЯ рдмрдирд╛рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред\n\n"
             "*(рдЙрджрд╛рд╣рд░рдг: `@my_channel_name` рдпрд╛ `-100123456789`)*\n\n"
             "**рдиреЛрдЯ:** рдореБрдЭреЗ рдЗрд╕ рдЪреИрдирд▓ рдХрд╛ **рдПрдбрдорд┐рди** рд╣реЛрдирд╛ рдЬрд╝рд░реВрд░реА рд╣реИред",
        parse_mode='Markdown'
    )
    return GET_CHANNEL_ID


# 4. рдЪреИрдирд▓ ID рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ рдФрд░ рдмреЙрдЯ рдПрдбрдорд┐рди рдЪреЗрдХ рдХрд░реЗрдВ
async def get_channel_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel_id_input = update.message.text.strip()
    # detect numeric id pattern (like -100123456789 рдпрд╛ рд╕рд┐рд░реНрдл digits)
    numeric_match = re.match(r'^-?\d+$', channel_id_input)

    if numeric_match:
        # numeric chat id (int)
        try:
            channel_id = int(channel_id_input)
        except ValueError:
            channel_id = channel_id_input  # fallback but unlikely
    else:
        # treat as username; ensure startswith '@'
        channel_id = channel_id_input if channel_id_input.startswith('@') else f"@{channel_id_input}"

    context.user_data['temp_channel_id'] = channel_id

    try:
        bot_user = await context.bot.get_me()
        bot_id = bot_user.id

        chat_member = await context.bot.get_chat_member(chat_id=channel_id, user_id=bot_id)
        # chat_member.status could be 'administrator' or 'creator'
        if getattr(chat_member, "status", "").lower() in ['administrator', 'creator']:
            await update.message.reply_text(
                "тЬЕ рдмреЙрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЪреИрдирд▓ **рдПрдбрдорд┐рди** рд╣реИред\n"
                "рдЕрдм рдЖрдк рдЕрдкрдирд╛ рд╡реЛрдЯ рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВред рдХреГрдкрдпрд╛ **`/poll [рд╕рд╡рд╛рд▓]? [рдСрдкреНрд╢рди1], [рдСрдкреНрд╢рди2], ...`** рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рднреЗрдЬреЗрдВред\n"
                "*(рдпрд╛ /cancel рджрдмрд╛рдХрд░ рд░рджреНрдж рдХрд░реЗрдВ)*",
                parse_mode='Markdown'
            )
            return CREATE_CHANNEL_POLL
        else:
            await update.message.reply_text(
                "тЭМ рдореИрдВ рдЖрдкрдХреЗ рдЪреИрдирд▓ рдХрд╛ **рдПрдбрдорд┐рди рдирд╣реАрдВ** рд╣реВрдБред\n"
                "рдХреГрдкрдпрд╛ рдореБрдЭреЗ рдПрдбрдорд┐рди (рдХрдо рд╕реЗ рдХрдо **'Post Messages'** рдХреА рдЕрдиреБрдорддрд┐ рдХреЗ рд╕рд╛рде) рдмрдирд╛рдПрдБ рдФрд░ рдлрд┐рд░ рд╕реЗ рдЪреИрдирд▓ рдХрд╛ @username рднреЗрдЬреЗрдВред"
            )
            return GET_CHANNEL_ID

    except Exception as e:
        logging.exception("Error checking admin status")
        await update.message.reply_text(
            "тЪая╕П **рдЪреИрдирд▓ рддрдХ рдкрд╣реБрдБрдЪрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐** рд╣реБрдИред рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐:\n"
            "1. рдЪреИрдирд▓ рдХрд╛ @username/ID рд╕рд╣реА рд╣реИред\n"
            "2. рдЪреИрдирд▓ **рдкрдмреНрд▓рд┐рдХ** рд╣реИ рдпрд╛ рдЖрдкрдиреЗ рдореБрдЭреЗ рдЪреИрдирд▓ рдореЗрдВ **рдПрдбрдорд┐рди** рдХреЗ рд░реВрдк рдореЗрдВ рдЬреЛрдбрд╝рд╛ рд╣реИред"
        )
        return GET_CHANNEL_ID


# 5. рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП /poll (Conversation рдореЗрдВ)
async def create_channel_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel_id = context.user_data.get('temp_channel_id')
    user = update.effective_user

    # message text рд╕реЗ parse рдХрд░реЗрдВ (command рдореЗрдВ рд╕реЗ /poll рд╣рдЯрд╛рдХрд░)
    text = ""
    if update.message and update.message.text:
        text = re.sub(r'^/poll(@\w+)?\s*', '', update.message.text, count=1)

    parsed = parse_poll_from_text(text)
    if not parsed:
        await update.message.reply_text("рд╡реЛрдЯ рдХрд╛ рдлреЙрд░реНрдореЗрдЯ рдЧрд▓рдд рд╣реИред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")
        return CREATE_CHANNEL_POLL

    question, options = parsed

    try:
        poll_message = await context.bot.send_poll(
            chat_id=channel_id,
            question=question,
            options=options,
            is_anonymous=False,
            allows_multiple_answers=False,
        )

        # prepare deep link using bot username (safer to fetch)
        bot_user = await context.bot.get_me()
        bot_username = bot_user.username or context.bot.username or "bot"

        deep_link_payload = f"poll_{poll_message.message_id}_{str(channel_id).replace('@','')}"
        welcome_keyboard = [[
            InlineKeyboardButton(
                f"ЁЯСЛ {user.first_name} рд╕реЗ рдЬреБрдбрд╝реЗрдВ!",
                url=f"https://t.me/{bot_username}?start={deep_link_payload}"
            )
        ]]
        welcome_markup = InlineKeyboardMarkup(welcome_keyboard)

        channel_welcome_message = (
            f"**ЁЯУК рдирдпрд╛ рдЪреИрдирд▓ рд╡реЛрдЯ рдмрдирд╛!**\n\n"
            f"рдпрд╣ рд╡реЛрдЯ рдпреВрдЬрд░ рджреНрд╡рд╛рд░рд╛ рдмрдирд╛рдпрд╛ рдЧрдпрд╛ рд╣реИ:\n"
            f"ЁЯСд **рдирд╛рдо:** [{user.first_name}](tg://user?id={user.id})\n"
            f"ЁЯЖФ **ID:** `{user.id}`\n"
            f"ЁЯМР **Username:** {f'@{user.username}' if user.username else 'N/A'}\n"
            f"ЁЯФЧ **рдЪреИрдирд▓:** `{channel_id}`\n\n"
            f"рдЗрд╕ рдпреВрдЬрд░ рд╕реЗ рдЬреБрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред\n"
        )

        if LOG_CHANNEL_USERNAME:
            try:
                await context.bot.send_photo(
                    chat_id=LOG_CHANNEL_USERNAME,
                    photo=IMAGE_URL,
                    caption=channel_welcome_message,
                    parse_mode='Markdown',
                    reply_markup=welcome_markup
                )
            except Exception:
                logging.exception("Failed to send log message to LOG_CHANNEL_USERNAME")

        # cleanup temp data
        context.user_data.pop('temp_channel_id', None)

        await update.message.reply_text(
            f"тЬЕ рдЖрдкрдХрд╛ рд╡реЛрдЯ **{channel_id}** рдЪреИрдирд▓ рдореЗрдВ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ!\n"
            f"рд▓реЙрдЧ рдореИрд╕реЗрдЬ **{LOG_CHANNEL_USERNAME}** рдореЗрдВ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред",
            parse_mode='Markdown'
        )
        return ConversationHandler.END

    except Exception as e:
        logging.exception("Failed to send poll to target channel")
        await update.message.reply_text(f"рд╡реЛрдЯ рднреЗрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}")
        return CREATE_CHANNEL_POLL


# 6. cancel handler
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рд░рджреНрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред')
    # cleanup
    context.user_data.pop('temp_channel_id', None)
    return ConversationHandler.END


# -------------------------
# main()
# -------------------------
def main():
    if not BOT_TOKEN:
        logging.error("BOT_TOKEN environment variable рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИред")
        return

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # /start
    application.add_handler(CommandHandler("start", start))

    # simple /poll for chats
    application.add_handler(CommandHandler("poll", create_poll))

    # conversation for channel polls
    poll_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_channel_poll_conversation_cb, pattern='^start_channel_poll_conv$'),
        ],
        states={
            GET_CHANNEL_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_channel_id)],
            # рдпрд╣рд╛рдБ CommandHandler рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рддрд╛рдХрд┐ '/poll' рдХрдорд╛рдВрдб рд╕реЗ рд╣реА рдЖрдЧреЗ рдмрдврд╝реЗ
            CREATE_CHANNEL_POLL: [CommandHandler('poll', create_channel_poll)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=False
    )

    application.add_handler(poll_conv_handler)

    logging.info("рдмреЙрдЯ рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ...")
    application.run_polling(poll_interval=3)


if __name__ == '__main__':
    main()
